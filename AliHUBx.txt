local imageId = "rbxassetid://83777934849279"
local toolName = "Tung Bat"
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local runService = game:GetService("RunService")
local baseY = 100

-- Store player name when script starts
local storedPlayerName = player.Name
local TpCompletedS = false

local function freezeCharacterAtPosition(char, position, freezeTime)
    freezeTime = freezeTime or 1
    
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
    
    if char:FindFirstChild("HumanoidRootPart") then
        char.HumanoidRootPart.CFrame = position
    end
    
    local conn
    conn = runService.RenderStepped:Connect(function()
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = position
        else
            conn:Disconnect()
        end
    end)
    
    wait(freezeTime)
    
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = false
        end
    end
    
    if conn then conn:Disconnect() end
end

-- Function to find and teleport to player's base
local function teleportToBase()
    TpCompletedS = false
    local char = player.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then
        warn("Character or HumanoidRootPart not found")
        return
    end
    
    -- Search for SurfaceGui objects inside PlotSign models
    local foundBase = nil
    local function searchInDescendants(parent)
        for _, descendant in ipairs(parent:GetDescendants()) do
            -- Look for models that contain PlotSign
            if descendant:IsA("Model") then
                local plotSign = descendant:FindFirstChild("PlotSign")
                if plotSign then
                    -- Look for SurfaceGui inside PlotSign
                    local surfaceGui = plotSign:FindFirstChild("SurfaceGui")
                    if surfaceGui then
                        -- Look for Frame inside SurfaceGui, then TextLabel inside Frame
                        for _, frame in ipairs(surfaceGui:GetChildren()) do
                            if frame:IsA("Frame") then
                                for _, child in ipairs(frame:GetChildren()) do
                                    if child:IsA("TextLabel") then
                                        local text = child.Text
                                        local expectedText = storedPlayerName .. "'s Base"
                                        
                                        -- Check if text matches exactly: "PlayerName's Base"
                                        if text == expectedText then
                                            foundBase = plotSign
                                            return true
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        return false
    end
    
    -- Search in workspace
    if searchInDescendants(game.Workspace) and foundBase then
        -- Get the position of the PlotSign (should be a part)
        if foundBase:IsA("BasePart") then
            local teleportPosition = foundBase.CFrame + Vector3.new(0, 5, 0) -- Teleport slightly above
            
            -- Teleport and freeze character
            spawn(function()
                freezeCharacterAtPosition(char, teleportPosition, 1)
                TpCompletedS = true
                print("Teleported to base successfully!")
            end)
        else
            warn("PlotSign is not a valid part")
        end
    else
        warn("Could not find base for player: " .. storedPlayerName)
        print("Looking for text: " .. storedPlayerName .. "'s Base")
    end
end

-- Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ModMenuGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

local mainButton = Instance.new("ImageButton")
mainButton.Name = "MainButton"
mainButton.Size = UDim2.new(0, 70, 0, 70)
mainButton.Position = UDim2.new(0.1, 0, 0.1, 0)
mainButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainButton.BorderSizePixel = 2
mainButton.BorderColor3 = Color3.fromRGB(255,0,0)
mainButton.Image = imageId
mainButton.Parent = screenGui
mainButton.Draggable = true

local modMenu = Instance.new("Frame")
modMenu.Name = "ModMenu"
modMenu.Size = UDim2.new(0, 250, 0, 320)
modMenu.Position = UDim2.new(0.1, 80, 0.1, 0)
modMenu.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
modMenu.BorderSizePixel = 2
modMenu.BorderColor3 = Color3.fromRGB(255,0,0)
modMenu.Visible = false
modMenu.Parent = screenGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 40)
title.BackgroundTransparency = 1
title.Text = "MOD MENU"
title.Font = Enum.Font.GothamBold
title.TextColor3 = Color3.fromRGB(255,0,0)
title.TextSize = 28
title.Parent = modMenu

-- Make modMenu draggable
local dragging = false
local dragInput, dragStart, startPos

modMenu.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = modMenu.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

modMenu.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        modMenu.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Function to create toggle buttons
local function createToggle(name, ypos)
    local frame = Instance.new("Frame")
    frame.BackgroundTransparency = 1
    frame.Size = UDim2.new(1, -20, 0, 45)
    frame.Position = UDim2.new(0, 10, 0, ypos)
    frame.Parent = modMenu
    
    local button = Instance.new("TextButton")
    button.Name = name.."Button"
    button.Size = UDim2.new(0.7, 0, 1, 0)
    button.Position = UDim2.new(0, 0, 0, 0)
    button.BackgroundColor3 = Color3.fromRGB(40,0,0)
    button.TextColor3 = Color3.fromRGB(255,255,255)
    button.Font = Enum.Font.Gotham
    button.Text = name
    button.TextSize = 20
    button.Parent = frame
    
    local toggle = Instance.new("TextLabel")
    toggle.Name = "Toggle"
    toggle.Size = UDim2.new(0.3, 0, 1, 0)
    toggle.Position = UDim2.new(0.7, 0, 0, 0)
    toggle.BackgroundColor3 = Color3.fromRGB(60,0,0)
    toggle.TextColor3 = Color3.fromRGB(255,0,0)
    toggle.Font = Enum.Font.GothamBold
    toggle.Text = "OFF"
    toggle.TextSize = 18
    toggle.Parent = frame
    
    return button, toggle
end

-- Create buttons (removed TP Wall and TP UP, added TP BASE)
local y = 50
local buttons = {}

buttons.TPBase, buttons.TPBaseToggle = createToggle("TP BASE", y)
buttons.Speed, buttons.SpeedToggle = createToggle("Speed Boost", y+50)
buttons.Jump, buttons.JumpToggle = createToggle("Jump Boost", y+100)
buttons.AutoHit, buttons.AutoHitToggle = createToggle("Auto Hit", y+150)

-- Toggle states
local toggles = {
    TPBase = false,
    Speed = false,
    Jump = false,
    AutoHit = false,
}

local connections = {}

-- Noclip functionality (used for some features)
local noclipActive = false
local noclipConnection = nil

local function setNoclip(active)
    if noclipActive == active then return end
    noclipActive = active
    
    if noclipActive then
        noclipConnection = runService.Stepped:Connect(function()
            local char = player.Character
            if char then
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide == true then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConnection then noclipConnection:Disconnect() end
        local char = player.Character
        if char then
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

-- Button click handlers
buttons.TPBase.MouseButton1Click:Connect(function()
    toggles.TPBase = not toggles.TPBase
    buttons.TPBaseToggle.Text = toggles.TPBase and "ON" or "OFF"
    buttons.TPBaseToggle.TextColor3 = toggles.TPBase and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
    
    if toggles.TPBase then
        teleportToBase()
        -- Auto turn off after teleport
        wait(0.1)
        toggles.TPBase = false
        buttons.TPBaseToggle.Text = "OFF"
        buttons.TPBaseToggle.TextColor3 = Color3.fromRGB(255,0,0)
    end
end)

buttons.Speed.MouseButton1Click:Connect(function()
    toggles.Speed = not toggles.Speed
    buttons.SpeedToggle.Text = toggles.Speed and "ON" or "OFF"
    buttons.SpeedToggle.TextColor3 = toggles.Speed and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
    
    local char = player.Character
    if char and char:FindFirstChild("Humanoid") then
        if toggles.Speed then
            char.Humanoid.WalkSpeed = 50
        else
            char.Humanoid.WalkSpeed = 16
        end
    end
end)

buttons.Jump.MouseButton1Click:Connect(function()
    toggles.Jump = not toggles.Jump
    buttons.JumpToggle.Text = toggles.Jump and "ON" or "OFF"
    buttons.JumpToggle.TextColor3 = toggles.Jump and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
    
    local char = player.Character
    if char and char:FindFirstChild("Humanoid") then
        if toggles.Jump then
            char.Humanoid.JumpPower = 100
        else
            char.Humanoid.JumpPower = 50
        end
    end
end)

buttons.AutoHit.MouseButton1Click:Connect(function()
    toggles.AutoHit = not toggles.AutoHit
    buttons.AutoHitToggle.Text = toggles.AutoHit and "ON" or "OFF"
    buttons.AutoHitToggle.TextColor3 = toggles.AutoHit and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
    
    if connections.AutoHit then
        connections.AutoHit:Disconnect()
        connections.AutoHit = nil
    end
    
    if toggles.AutoHit then
        connections.AutoHit = runService.RenderStepped:Connect(function()
            -- Auto hit logic - simulate mouse click
            if mouse.Target and mouse.Target.Parent:FindFirstChild("Humanoid") then
                -- Simulate tool activation or hit
                local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
                if tool and tool:FindFirstChild("Handle") then
                    tool:Activate()
                end
            end
        end)
    end
end)

-- Main button toggle
mainButton.MouseButton1Click:Connect(function()
    modMenu.Visible = not modMenu.Visible
end)

-- Clean up on player leaving
game.Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == player then
        for _, connection in pairs(connections) do
            if connection then
                connection:Disconnect()
            end
        end
        if noclipConnection then
            noclipConnection:Disconnect()
        end
    end
end)

print("Mod menu loaded successfully!")
print("Stored player name: " .. storedPlayerName)
print("TpCompletedS initialized as: " .. tostring(TpCompletedS))
